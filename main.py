# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wF2ZVLoHeOUkOydD7hIweqAUmCBI_D1f
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
from sklearn.cluster import DBSCAN
from mlxtend.preprocessing import TransactionEncoder
from mlxtend.frequent_patterns import apriori, association_rules

if __name__ == '__main__':
    df = pd.read_csv('online store customer.csv')
    print(df.info())
#phase 1
#missing value
    df = df.dropna(how='all')
    #NaN
    df = df.fillna(method ='pad')
    #NULL
    df = df.interpolate(method='linear', limit_direction='forward')

#outlier
    sns.boxplot(df['Age'])
    #plt.show()
    sns.boxplot(df['Amount_spent'])
    #plt.show()
    print(np.where((df['Age'] < 15) & (df['Marital_status'] == 'Married')))
    print(np.where((df['Age'] < 10) & (df['Employees_status'] != 'Unemployment')))
#data reduction
    df = df.groupby('Gender', group_keys=False).apply(lambda x: x.sample(frac=0.6))
    print(df.info())
#categorical
    bins = [0, 17, 25, 35 , 50 , 100]
    labels = ['17', '25', '35', '50','100']
    df['Age_cat'] = pd.cut(df['Age'], bins=bins, labels=labels)

    bins = [0, 17, 25, 35, 50, 100]
    labels = ['17', '25', '35', '50', '100']
    print(df.info())
#text data

#Amount_spent , Employee_status

employees = df.loc[df['Employees_status'] == 'Employees']
self = df.loc[df['Employees_status'] == 'self-employed']
workers = df.loc[df['Employees_status'] == 'workers']
unemployment = df.loc[df['Employees_status'] == 'Unemployment']

mean_employees = employees['Amount_spent'].mean()
mean_self = self['Amount_spent'].mean()
mean_workers = workers['Amount_spent'].mean()
mean_unemployment = unemployment['Amount_spent'].mean()

for i in df.index:
   if(df['Employees_status'][i] == 'Employees'):
       x = int(df['Amount_spent'][i] / mean_employees * 100)
   if (df['Employees_status'][i] == 'self-employed'):
       x =  int(df['Amount_spent'][i] / mean_self * 100)
   if (df['Employees_status'][i] == 'workers'):
       x = int(df['Amount_spent'][i] / mean_workers * 100)
   if (df['Employees_status'][i] == 'Unemployment'):
       x = int(df['Amount_spent'][i] / mean_unemployment * 100)
   if x <= 50:
       t = ' very low'
   if x > 50 and x <= 80:
       t = ' low'
   if x > 80 and x <= 120:
       t = ' normal'
   if x > 120 and x <= 170:
       t = ' high'
   if x > 170:
       t = ' very high'
   print("percentage to avg: %",x,t )
print(df['State_names'].unique())
value_counts = df['State_names'].value_counts()
print(value_counts)

#phase 2
df['North Dakota'] = False;
df['Tennessee'] = False
df['Oklahoma'] = False
df['Nebraska'] = False
df['Texas'] = False
df['Hawaii'] = False
df['Alabama'] = False
df['Colorado'] = False
df['Indiana'] = False
df['Ohio'] = False
df['Montana'] = False
df['Utah'] = False
df['Idaho'] = False
df['North Carolina'] = False
df['Kansas'] = False
df['Virginia'] = False
df['Delaware'] = False
df['New Jersey'] = False
df['Arkansas'] = False
df['New Hampshire'] = False
df['Nevada'] = False
df['Wisconsin'] = False
df['Maryland'] = False
df['Rhode Island'] = False
df['Wyoming'] = False
df['South Dakota'] = False
df['Alaska'] = False
df['Mississippi'] = False
df['South Carolina'] = False
df['Florida'] = False
df['West Virginia'] = False
df['Missouri'] = False
df['Michigan'] = False
df['Pennsylvania'] = False
df['Kentucky'] = False
df['Iowa'] = False
df['Louisiana'] = False
df['California'] = False
df['Illinois'] = False
df['Minnesota'] = False
df['Washington'] = False
df['New Mexico'] = False
df['Connecticut'] = False
df['Oregon'] = False
df['New York'] = False
df['Massachusetts'] = False
df['Arizona'] = False
df['Maine'] = False
df['Vermont'] = False
df['Georgia'] = False
df['Male'] = False
df['Female'] = False
df['Married'] = False
df['Single'] = False
df['PayPal'] = False
df['Card'] = False
df['Other'] = False
df['label'] = False
avg = df.loc[df['Employees_status'] == 'Unemployment','Amount_spent'].mean()

# convert categorical values to binary values using one-hot encoding
for i in df.index:
  s = str(df['State_names'][i])
  df[s][i] = True
  if df['Gender'][i] == 'Male':
      df['Male'][i] = True;
  else:
      df['Female'][i] = True;
  if df['Marital_status'][i] == 'Married':
      df['Married'][i] = True;
  else:
      df['Single'][i] = True;
  if df['Payment_method'][i] == 'PayPal':
      df['PayPal'][i] = True
  elif df['Payment_method'][i] == 'Card':
      df['Card'][i] = True
  else:
      df['Other'][i] = True
  # add the label column to the one-hot encoded dataframe
  if df['Amount_spent'][i] > avg:
      df['label'][i] = True



# extract the categorical columns
df_cat = df[['Male','Female', 'Married','Single', 'PayPal','Card', 'Other','Maryland', 'Arkansas', 'Iowa', 'Florida', 'Oregon' ,'Nevada', 'Idaho',
 'California' ,'New Hampshire' ,'New Mexico' ,'Colorado' ,'Nebraska',
 'Connecticut', 'Kentucky' ,'North Carolina', 'Alabama' ,'Vermont' ,'Ohio',
 'New York', 'Wisconsin' ,'Rhode Island' ,'Kansas' ,'Washington', 'Indiana',
 'Alaska' ,'Missouri' ,'Georgia', 'Maine' ,'Pennsylvania', 'Mississippi',
 'New Jersey' ,'Illinois' ,'Texas' ,'Delaware' ,'Virginia' ,'South Carolina',
 'Arizona' ,'Minnesota' ,'Oklahoma' ,'South Dakota' ,'Massachusetts', 'Utah',
 'Hawaii' ,'Michigan', 'Montana', 'Louisiana' ,'Wyoming' ,'Tennessee'
 ,'North Dakota', 'West Virginia']].copy()

for col_name in cat_cols.columns:
    df_cat[col_name] = df_cat[col_name].fillna(False)

# apply Apriori algorithm to extract frequent itemsets
frequent_itemsets = apriori(df_cat, min_support=0.1, use_colnames=True)

# apply association rule mining to extract rules from frequent itemsets
rules = association_rules(frequent_itemsets, metric='lift', min_threshold=1)

# print the frequent itemsets and rules
print('Frequent Itemsets:')
print(frequent_itemsets)
print('\nAssociation Rules:')
print(rules)

#phase 3
#extract the features to be used for clustering
X = df[['Referal', 'Amount_spent']]

# perform DBSCAN clustering with eps=10 and min_samples=5
dbscan = DBSCAN(eps=10, min_samples=5).fit(X)

# add the cluster labels to the dataframe
df['Cluster'] = dbscan.labels_

# plot the clusters
colors = ['red', 'green', 'blue', 'yellow', 'purple']
for i in range(len(df['Cluster'].unique())):
    plt.scatter(X.loc[df['Cluster'] == i, 'Age'],
                X.loc[df['Cluster'] == i, 'Amount_spent'],
                color=colors[i], alpha=0.5)
plt.xlabel('Age')
plt.ylabel('Amount spent')
plt.show()